type User {
  id: ID!
  email: String!
  decks(filter: ModelDeckFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDeckConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Deck {
  id: ID!
  title: String!
  userID: ID!
  user: User
  questions(contentContentans: ModelQuestionByDeckCompositeKeyConditionInput, filter: ModelQuestionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Question {
  id: ID!
  deckID: ID!
  deck: Deck
  content: String!
  contentans: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getDeck(id: ID!): Deck
  listDecks(filter: ModelDeckFilterInput, limit: Int, nextToken: String): ModelDeckConnection
  getQuestion(id: ID!): Question
  listQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String): ModelQuestionConnection
}

input CreateUserInput {
  id: ID
  email: String!
}

input UpdateUserInput {
  id: ID!
  email: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createDeck(input: CreateDeckInput!, condition: ModelDeckConditionInput): Deck
  updateDeck(input: UpdateDeckInput!, condition: ModelDeckConditionInput): Deck
  deleteDeck(input: DeleteDeckInput!, condition: ModelDeckConditionInput): Deck
  createQuestion(input: CreateQuestionInput!, condition: ModelQuestionConditionInput): Question
  updateQuestion(input: UpdateQuestionInput!, condition: ModelQuestionConditionInput): Question
  deleteQuestion(input: DeleteQuestionInput!, condition: ModelQuestionConditionInput): Question
}

input ModelUserConditionInput {
  email: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateDeck: Deck @aws_subscribe(mutations: ["createDeck"])
  onUpdateDeck: Deck @aws_subscribe(mutations: ["updateDeck"])
  onDeleteDeck: Deck @aws_subscribe(mutations: ["deleteDeck"])
  onCreateQuestion: Question @aws_subscribe(mutations: ["createQuestion"])
  onUpdateQuestion: Question @aws_subscribe(mutations: ["updateQuestion"])
  onDeleteQuestion: Question @aws_subscribe(mutations: ["deleteQuestion"])
}

type ModelDeckConnection {
  items: [Deck]
  nextToken: String
}

input ModelDeckFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  userID: ModelIDInput
  and: [ModelDeckFilterInput]
  or: [ModelDeckFilterInput]
  not: ModelDeckFilterInput
}

input CreateDeckInput {
  id: ID
  title: String!
  userID: ID!
}

input UpdateDeckInput {
  id: ID!
  title: String
  userID: ID
}

input DeleteDeckInput {
  id: ID!
}

input ModelDeckConditionInput {
  title: ModelStringInput
  userID: ModelIDInput
  and: [ModelDeckConditionInput]
  or: [ModelDeckConditionInput]
  not: ModelDeckConditionInput
}

type ModelQuestionConnection {
  items: [Question]
  nextToken: String
}

input ModelQuestionFilterInput {
  id: ModelIDInput
  deckID: ModelIDInput
  content: ModelStringInput
  contentans: ModelStringInput
  and: [ModelQuestionFilterInput]
  or: [ModelQuestionFilterInput]
  not: ModelQuestionFilterInput
}

input CreateQuestionInput {
  id: ID
  deckID: ID!
  content: String!
  contentans: String!
}

input UpdateQuestionInput {
  id: ID!
  deckID: ID
  content: String
  contentans: String
}

input DeleteQuestionInput {
  id: ID!
}

input ModelQuestionConditionInput {
  deckID: ModelIDInput
  content: ModelStringInput
  contentans: ModelStringInput
  and: [ModelQuestionConditionInput]
  or: [ModelQuestionConditionInput]
  not: ModelQuestionConditionInput
}

input ModelQuestionByDeckCompositeKeyConditionInput {
  eq: ModelQuestionByDeckCompositeKeyInput
  le: ModelQuestionByDeckCompositeKeyInput
  lt: ModelQuestionByDeckCompositeKeyInput
  ge: ModelQuestionByDeckCompositeKeyInput
  gt: ModelQuestionByDeckCompositeKeyInput
  between: [ModelQuestionByDeckCompositeKeyInput]
  beginsWith: ModelQuestionByDeckCompositeKeyInput
}

input ModelQuestionByDeckCompositeKeyInput {
  content: String
  contentans: String
}
